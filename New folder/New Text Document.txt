const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight - 50;

let basket, stars, bombs, score, lives, gameOver, speedMultiplier, startTime, elapsedTime;

function startGame() {
    document.getElementById("startScreen").style.display = "none";
    canvas.style.display = "block";
    startTime = Date.now();
    initGame();
    gameLoop();
}

function initGame() {
    basket = { x: canvas.width / 2 - 50, y: canvas.height - 60, width: 100, height: 60 };
    stars = [];
    bombs = [];
    score = 0;
    lives = 5;
    gameOver = false;
    speedMultiplier = 1;
    elapsedTime = 0;
}

function createStar() {
    let x = Math.random() * (canvas.width - 20);
    stars.push({ x, y: 0, size: 20, speed: (2 + Math.random() * 2) * speedMultiplier });
}

function createBomb() {
    let x = Math.random() * (canvas.width - 20);
    bombs.push({ x, y: 0, size: 30, speed: (3 + Math.random() * 2) * speedMultiplier });
}

function drawBasket() {
    ctx.fillStyle = "saddlebrown";
    ctx.fillRect(basket.x, basket.y, basket.width, basket.height);
}

function drawStars() {
    stars.forEach(star => {
        ctx.fillStyle = "yellow";
        ctx.font = "20px Arial";
        ctx.fillText("⭐", star.x, star.y);
    });
}

function drawBombs() {
    bombs.forEach(bomb => {
        ctx.fillStyle = "black";
        ctx.beginPath();
        ctx.arc(bomb.x, bomb.y, bomb.size / 2, 0, Math.PI * 2);
        ctx.fill();
    });
}

function updateObjects() {
    if (gameOver) return;
    
    stars.forEach((star, index) => {
        star.y += star.speed;
        if (star.y + star.size > basket.y && star.x > basket.x && star.x < basket.x + basket.width) {
            score++;
            stars.splice(index, 1);
            speedMultiplier += 0.05;
        } else if (star.y > canvas.height) {
            stars.splice(index, 1);
        }
    });

    bombs.forEach((bomb, index) => {
        bomb.y += bomb.speed;
        if (bomb.y + bomb.size > basket.y && bomb.x > basket.x && bomb.x < basket.x + basket.width) {
            lives--;
            bombs.splice(index, 1);
            if (lives === 0) {
                gameOver = true;
                document.getElementById("gameOverScreen").style.display = "block";
                document.getElementById("finalScore").innerHTML = `Score: ${score} | Time: ${Math.floor((Date.now() - startTime) / 1000)}s`;
            }
        } else if (bomb.y > canvas.height) {
            bombs.splice(index, 1);
        }
    });
}

function drawScore() {
    ctx.fillStyle = "white";
    ctx.font = "20px Arial";
    ctx.fillText(`Score: ${score}`, 10, 60);
    ctx.fillText(`Lives: ${"❤️".repeat(lives)}`, canvas.width - 100, 60);
}

function gameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBasket();
    drawStars();
    drawBombs();
    drawScore();
    updateObjects();
    if (!gameOver) requestAnimationFrame(gameLoop);
}

function restartGame() {
    document.getElementById("gameOverScreen").style.display = "none";
    initGame();
    gameLoop();
}

window.addEventListener("mousemove", (event) => {
    basket.x = event.clientX - basket.width / 2;
});

setInterval(createStar, 1000);
setInterval(createBomb, 3000);
